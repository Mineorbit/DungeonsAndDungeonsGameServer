// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StreamChunk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game {

  /// <summary>Holder for reflection information generated from StreamChunk.proto</summary>
  public static partial class StreamChunkReflection {

    #region Descriptor
    /// <summary>File descriptor for StreamChunk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreamChunkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFTdHJlYW1DaHVuay5wcm90bxIEZ2FtZRoPQ2h1bmtEYXRhLnByb3RvIkgK",
            "C1N0cmVhbUNodW5rEiYKCWNodW5rRGF0YRgBIAEoCzITLk5ldExldmVsLkNo",
            "dW5rRGF0YRIRCglpbW1lZGlhdGUYAiABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NetLevel.ChunkDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.StreamChunk), global::Game.StreamChunk.Parser, new[]{ "ChunkData", "Immediate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StreamChunk : pb::IMessage<StreamChunk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamChunk> _parser = new pb::MessageParser<StreamChunk>(() => new StreamChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.StreamChunkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamChunk(StreamChunk other) : this() {
      chunkData_ = other.chunkData_ != null ? other.chunkData_.Clone() : null;
      immediate_ = other.immediate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamChunk Clone() {
      return new StreamChunk(this);
    }

    /// <summary>Field number for the "chunkData" field.</summary>
    public const int ChunkDataFieldNumber = 1;
    private global::NetLevel.ChunkData chunkData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetLevel.ChunkData ChunkData {
      get { return chunkData_; }
      set {
        chunkData_ = value;
      }
    }

    /// <summary>Field number for the "immediate" field.</summary>
    public const int ImmediateFieldNumber = 2;
    private bool immediate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Immediate {
      get { return immediate_; }
      set {
        immediate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChunkData, other.ChunkData)) return false;
      if (Immediate != other.Immediate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chunkData_ != null) hash ^= ChunkData.GetHashCode();
      if (Immediate != false) hash ^= Immediate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (chunkData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChunkData);
      }
      if (Immediate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Immediate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (chunkData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChunkData);
      }
      if (Immediate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Immediate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chunkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChunkData);
      }
      if (Immediate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamChunk other) {
      if (other == null) {
        return;
      }
      if (other.chunkData_ != null) {
        if (chunkData_ == null) {
          ChunkData = new global::NetLevel.ChunkData();
        }
        ChunkData.MergeFrom(other.ChunkData);
      }
      if (other.Immediate != false) {
        Immediate = other.Immediate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chunkData_ == null) {
              ChunkData = new global::NetLevel.ChunkData();
            }
            input.ReadMessage(ChunkData);
            break;
          }
          case 16: {
            Immediate = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (chunkData_ == null) {
              ChunkData = new global::NetLevel.ChunkData();
            }
            input.ReadMessage(ChunkData);
            break;
          }
          case 16: {
            Immediate = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
