// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LevelMetaData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetLevel {

  /// <summary>Holder for reflection information generated from LevelMetaData.proto</summary>
  public static partial class LevelMetaDataReflection {

    #region Descriptor
    /// <summary>File descriptor for LevelMetaData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LevelMetaDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNMZXZlbE1ldGFEYXRhLnByb3RvEghOZXRMZXZlbCKxAQoNTGV2ZWxNZXRh",
            "RGF0YRIUCgxsb2NhbExldmVsSWQYASABKAUSFQoNdW5pcXVlTGV2ZWxJZBgC",
            "IAEoAxIQCghGdWxsTmFtZRgDIAEoCRITCgtEZXNjcmlwdGlvbhgEIAEoCRIR",
            "CglhdmFpbEJsdWUYBSABKAgSEwoLYXZhaWxZZWxsb3cYBiABKAgSEAoIYXZh",
            "aWxSZWQYByABKAgSEgoKYXZhaWxHcmVlbhgIIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetLevel.LevelMetaData), global::NetLevel.LevelMetaData.Parser, new[]{ "LocalLevelId", "UniqueLevelId", "FullName", "Description", "AvailBlue", "AvailYellow", "AvailRed", "AvailGreen" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LevelMetaData : pb::IMessage<LevelMetaData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelMetaData> _parser = new pb::MessageParser<LevelMetaData>(() => new LevelMetaData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelMetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetLevel.LevelMetaDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelMetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelMetaData(LevelMetaData other) : this() {
      localLevelId_ = other.localLevelId_;
      uniqueLevelId_ = other.uniqueLevelId_;
      fullName_ = other.fullName_;
      description_ = other.description_;
      availBlue_ = other.availBlue_;
      availYellow_ = other.availYellow_;
      availRed_ = other.availRed_;
      availGreen_ = other.availGreen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelMetaData Clone() {
      return new LevelMetaData(this);
    }

    /// <summary>Field number for the "localLevelId" field.</summary>
    public const int LocalLevelIdFieldNumber = 1;
    private int localLevelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalLevelId {
      get { return localLevelId_; }
      set {
        localLevelId_ = value;
      }
    }

    /// <summary>Field number for the "uniqueLevelId" field.</summary>
    public const int UniqueLevelIdFieldNumber = 2;
    private long uniqueLevelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UniqueLevelId {
      get { return uniqueLevelId_; }
      set {
        uniqueLevelId_ = value;
      }
    }

    /// <summary>Field number for the "FullName" field.</summary>
    public const int FullNameFieldNumber = 3;
    private string fullName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "availBlue" field.</summary>
    public const int AvailBlueFieldNumber = 5;
    private bool availBlue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvailBlue {
      get { return availBlue_; }
      set {
        availBlue_ = value;
      }
    }

    /// <summary>Field number for the "availYellow" field.</summary>
    public const int AvailYellowFieldNumber = 6;
    private bool availYellow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvailYellow {
      get { return availYellow_; }
      set {
        availYellow_ = value;
      }
    }

    /// <summary>Field number for the "availRed" field.</summary>
    public const int AvailRedFieldNumber = 7;
    private bool availRed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvailRed {
      get { return availRed_; }
      set {
        availRed_ = value;
      }
    }

    /// <summary>Field number for the "availGreen" field.</summary>
    public const int AvailGreenFieldNumber = 8;
    private bool availGreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvailGreen {
      get { return availGreen_; }
      set {
        availGreen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelMetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelMetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalLevelId != other.LocalLevelId) return false;
      if (UniqueLevelId != other.UniqueLevelId) return false;
      if (FullName != other.FullName) return false;
      if (Description != other.Description) return false;
      if (AvailBlue != other.AvailBlue) return false;
      if (AvailYellow != other.AvailYellow) return false;
      if (AvailRed != other.AvailRed) return false;
      if (AvailGreen != other.AvailGreen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalLevelId != 0) hash ^= LocalLevelId.GetHashCode();
      if (UniqueLevelId != 0L) hash ^= UniqueLevelId.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AvailBlue != false) hash ^= AvailBlue.GetHashCode();
      if (AvailYellow != false) hash ^= AvailYellow.GetHashCode();
      if (AvailRed != false) hash ^= AvailRed.GetHashCode();
      if (AvailGreen != false) hash ^= AvailGreen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LocalLevelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LocalLevelId);
      }
      if (UniqueLevelId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UniqueLevelId);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FullName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (AvailBlue != false) {
        output.WriteRawTag(40);
        output.WriteBool(AvailBlue);
      }
      if (AvailYellow != false) {
        output.WriteRawTag(48);
        output.WriteBool(AvailYellow);
      }
      if (AvailRed != false) {
        output.WriteRawTag(56);
        output.WriteBool(AvailRed);
      }
      if (AvailGreen != false) {
        output.WriteRawTag(64);
        output.WriteBool(AvailGreen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LocalLevelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LocalLevelId);
      }
      if (UniqueLevelId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UniqueLevelId);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FullName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (AvailBlue != false) {
        output.WriteRawTag(40);
        output.WriteBool(AvailBlue);
      }
      if (AvailYellow != false) {
        output.WriteRawTag(48);
        output.WriteBool(AvailYellow);
      }
      if (AvailRed != false) {
        output.WriteRawTag(56);
        output.WriteBool(AvailRed);
      }
      if (AvailGreen != false) {
        output.WriteRawTag(64);
        output.WriteBool(AvailGreen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalLevelId);
      }
      if (UniqueLevelId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UniqueLevelId);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AvailBlue != false) {
        size += 1 + 1;
      }
      if (AvailYellow != false) {
        size += 1 + 1;
      }
      if (AvailRed != false) {
        size += 1 + 1;
      }
      if (AvailGreen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelMetaData other) {
      if (other == null) {
        return;
      }
      if (other.LocalLevelId != 0) {
        LocalLevelId = other.LocalLevelId;
      }
      if (other.UniqueLevelId != 0L) {
        UniqueLevelId = other.UniqueLevelId;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AvailBlue != false) {
        AvailBlue = other.AvailBlue;
      }
      if (other.AvailYellow != false) {
        AvailYellow = other.AvailYellow;
      }
      if (other.AvailRed != false) {
        AvailRed = other.AvailRed;
      }
      if (other.AvailGreen != false) {
        AvailGreen = other.AvailGreen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LocalLevelId = input.ReadInt32();
            break;
          }
          case 16: {
            UniqueLevelId = input.ReadInt64();
            break;
          }
          case 26: {
            FullName = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            AvailBlue = input.ReadBool();
            break;
          }
          case 48: {
            AvailYellow = input.ReadBool();
            break;
          }
          case 56: {
            AvailRed = input.ReadBool();
            break;
          }
          case 64: {
            AvailGreen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LocalLevelId = input.ReadInt32();
            break;
          }
          case 16: {
            UniqueLevelId = input.ReadInt64();
            break;
          }
          case 26: {
            FullName = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            AvailBlue = input.ReadBool();
            break;
          }
          case 48: {
            AvailYellow = input.ReadBool();
            break;
          }
          case 56: {
            AvailRed = input.ReadBool();
            break;
          }
          case 64: {
            AvailGreen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
